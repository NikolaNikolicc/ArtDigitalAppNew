{"ast":null,"code":"import { map } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class UploadService {\n  constructor(http) {\n    this.http = http;\n    this.server = \"http://localhost:8080\";\n  }\n  // define function to upload Files\n  upload(imageBlobs, imageNames, sessionID) {\n    const formData = new FormData();\n    // add sessionID to form data\n    formData.append('location', sessionID.toString());\n    // Append each file; filenames are handled automatically\n    imageBlobs.forEach((blob, index) => {\n      formData.append('files', blob, imageNames[index]);\n    });\n    return this.http.post(`${this.server}/file/upload`, formData, {\n      reportProgress: true,\n      observe: 'events'\n    });\n  }\n  // define function to download files\n  download(foldername) {\n    const url = `${this.server}/file/download/${foldername}`;\n    return this.http.get(url, {\n      responseType: 'blob',\n      observe: 'response'\n    }).pipe(map(response => response.body));\n  }\n  static #_ = this.ɵfac = function UploadService_Factory(t) {\n    return new (t || UploadService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: UploadService,\n    factory: UploadService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["map","UploadService","constructor","http","server","upload","imageBlobs","imageNames","sessionID","formData","FormData","append","toString","forEach","blob","index","post","reportProgress","observe","download","foldername","url","get","responseType","pipe","response","body","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["E:\\Projects\\Web2\\ArtDigitalAppNew\\frontend\\src\\app\\services\\upload.service.ts"],"sourcesContent":["import { HttpClient, HttpEvent } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable, map } from 'rxjs';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class UploadService {\r\n  private server = \"http://localhost:8080\"\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  // define function to upload Files\r\n  upload(imageBlobs: Blob[], imageNames: string[], sessionID: number): Observable<HttpEvent<string[]>> {\r\n    const formData = new FormData();\r\n    \r\n    // add sessionID to form data\r\n    formData.append('location', sessionID.toString());\r\n    // Append each file; filenames are handled automatically\r\n    imageBlobs.forEach((blob, index) => {\r\n      formData.append('files', blob, imageNames[index]);\r\n    });\r\n\r\n    return this.http.post<string[]>(`${this.server}/file/upload`, formData, {\r\n      reportProgress: true,\r\n      observe: 'events'\r\n    });\r\n  }\r\n\r\n  // define function to download files\r\n  download(foldername: string): Observable<Blob> {\r\n    const url = `${this.server}/file/download/${foldername}`;\r\n    return this.http.get(url, {\r\n      responseType: 'blob',\r\n      observe: 'response'\r\n    }).pipe(\r\n      map(response => response.body!)\r\n    );\r\n  }\r\n}\r\n"],"mappings":"AAEA,SAAqBA,GAAG,QAAQ,MAAM;;;AAKtC,OAAM,MAAOC,aAAa;EAGxBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAFhB,KAAAC,MAAM,GAAG,uBAAuB;EAEA;EAExC;EACAC,MAAMA,CAACC,UAAkB,EAAEC,UAAoB,EAAEC,SAAiB;IAChE,MAAMC,QAAQ,GAAG,IAAIC,QAAQ,EAAE;IAE/B;IACAD,QAAQ,CAACE,MAAM,CAAC,UAAU,EAAEH,SAAS,CAACI,QAAQ,EAAE,CAAC;IACjD;IACAN,UAAU,CAACO,OAAO,CAAC,CAACC,IAAI,EAAEC,KAAK,KAAI;MACjCN,QAAQ,CAACE,MAAM,CAAC,OAAO,EAAEG,IAAI,EAAEP,UAAU,CAACQ,KAAK,CAAC,CAAC;IACnD,CAAC,CAAC;IAEF,OAAO,IAAI,CAACZ,IAAI,CAACa,IAAI,CAAW,GAAG,IAAI,CAACZ,MAAM,cAAc,EAAEK,QAAQ,EAAE;MACtEQ,cAAc,EAAE,IAAI;MACpBC,OAAO,EAAE;KACV,CAAC;EACJ;EAEA;EACAC,QAAQA,CAACC,UAAkB;IACzB,MAAMC,GAAG,GAAG,GAAG,IAAI,CAACjB,MAAM,kBAAkBgB,UAAU,EAAE;IACxD,OAAO,IAAI,CAACjB,IAAI,CAACmB,GAAG,CAACD,GAAG,EAAE;MACxBE,YAAY,EAAE,MAAM;MACpBL,OAAO,EAAE;KACV,CAAC,CAACM,IAAI,CACLxB,GAAG,CAACyB,QAAQ,IAAIA,QAAQ,CAACC,IAAK,CAAC,CAChC;EACH;EAAC,QAAAC,CAAA,G;qBA/BU1B,aAAa,EAAA2B,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAb/B,aAAa;IAAAgC,OAAA,EAAbhC,aAAa,CAAAiC,IAAA;IAAAC,UAAA,EAFZ;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}