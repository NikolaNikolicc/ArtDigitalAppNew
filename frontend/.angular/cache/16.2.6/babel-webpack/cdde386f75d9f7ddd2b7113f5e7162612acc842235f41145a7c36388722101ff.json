{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component, ViewChild } from '@angular/core';\nexport let IndexComponent = class IndexComponent {\n  // renderer is used for display modal\n  constructor(renderer, uploadService, router) {\n    this.renderer = renderer;\n    this.uploadService = uploadService;\n    this.router = router;\n    this.blobs = [];\n    this.imagePreviews = [];\n    this.values = [];\n    this.photoFormat = \"\";\n    this.error = \"\";\n    this.showError = false;\n    this.paperBacking = \"mat\";\n  }\n  ngOnInit() {\n    localStorage.removeItem(\"photos uploaded\");\n  }\n  // display modal on page load\n  ngAfterViewInit() {\n    const modalNative = this.modalElementRef.nativeElement;\n    const modal = new bootstrap.Modal(modalNative, {\n      backdrop: 'static',\n      keyboard: false // Prevents closing with the escape key\n    });\n\n    modal.show();\n  }\n  decrementValue(index) {\n    this.values[index] = this.values[index] > 1 ? this.values[index] - 1 : 1;\n  }\n  incrementValue(index) {\n    this.values[index] = this.values[index] + 1;\n  }\n  changeValue(i, newValue) {\n    this.values[i] = newValue;\n  }\n  removeImage(index) {\n    this.imagePreviews.splice(index, 1);\n    this.blobs.splice(index, 1);\n    this.values.splice(index, 1);\n  }\n  setImageStyles() {\n    const styles = {\n      'height': '200px',\n      'width': '100%',\n      'object-fit': 'contain',\n      'overflow': 'hidden' // Hides parts of the image that overflow the dimensions (just in case)\n    };\n\n    return Object.entries(styles).map(([k, v]) => `${k}: ${v}`).join('; ');\n  }\n  // adding photos\n  onFilesSelected(event) {\n    localStorage.setItem(\"photos uploaded\", \"true\");\n    const input = event.target;\n    if (input.files == null) return;\n    if (!input.files.length) return;\n    const files = input.files;\n    // const blobs: Blob[] = [];\n    for (let i = 0; i < files.length; i++) {\n      const blob = new Blob([files[i]], {\n        type: files[i].type\n      });\n      this.blobs.push(blob);\n      this.values.push(1);\n      // Here you can either upload each blob right away or collect them in an array to upload later\n      // Create a FileReader to read the blob\n      const reader = new FileReader();\n      reader.onload = e => {\n        this.imagePreviews.push(e.target.result);\n      };\n      reader.readAsDataURL(blob);\n    }\n    // Example: Upload the first blob\n    // This is just for demonstration, your upload method may differ\n    this.uploadService.uploadImage(this.blobs[0]).subscribe(response => {\n      console.log('Upload successful', response);\n    }, error => console.error('Error:', error));\n  }\n  // switches between components\n  photosAdded() {\n    // error handling\n    this.showError = false;\n    this.error = \"\";\n    let pu = localStorage.getItem(\"photos uploaded\");\n    if (pu == null) {\n      this.error = \"Niste uneli ni jednu fotografiju.\";\n      this.showError = true;\n    }\n    if (this.photoFormat == \"\" && this.showError == false) {\n      this.error = \"Morate izabrati format izrade fotografija.\";\n      this.showError = true;\n    }\n    if (this.showError) {\n      const modalNative = this.modalError.nativeElement;\n      const modal = new bootstrap.Modal(modalNative, {\n        backdrop: 'static',\n        keyboard: false // Prevents closing with the escape key\n      });\n\n      modal.show();\n      return;\n    }\n    localStorage.setItem(\"photos\", JSON.stringify(this.blobs));\n    this.router.navigate([\"extras\"]);\n  }\n};\n__decorate([ViewChild('notificationModal')], IndexComponent.prototype, \"modalElementRef\", void 0);\n__decorate([ViewChild('errorModal')], IndexComponent.prototype, \"modalError\", void 0);\n__decorate([ViewChild('photoInput')], IndexComponent.prototype, \"photoInput\", void 0);\nIndexComponent = __decorate([Component({\n  selector: 'app-index',\n  templateUrl: './index.component.html',\n  styleUrls: ['./index.component.css']\n})], IndexComponent);","map":{"version":3,"names":["Component","ViewChild","IndexComponent","constructor","renderer","uploadService","router","blobs","imagePreviews","values","photoFormat","error","showError","paperBacking","ngOnInit","localStorage","removeItem","ngAfterViewInit","modalNative","modalElementRef","nativeElement","modal","bootstrap","Modal","backdrop","keyboard","show","decrementValue","index","incrementValue","changeValue","i","newValue","removeImage","splice","setImageStyles","styles","Object","entries","map","k","v","join","onFilesSelected","event","setItem","input","target","files","length","blob","Blob","type","push","reader","FileReader","onload","e","result","readAsDataURL","uploadImage","subscribe","response","console","log","photosAdded","pu","getItem","modalError","JSON","stringify","navigate","__decorate","selector","templateUrl","styleUrls"],"sources":["E:\\Projects\\Web2\\ArtDigitalApp\\frontend\\frontend\\src\\app\\components\\index\\index.component.ts"],"sourcesContent":["import { AfterViewInit, Component, ElementRef, OnInit, Renderer2, ViewChild } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { UploadService } from 'src/app/services/upload.service';\r\n\r\ndeclare var bootstrap: any; // This is for Bootstrap's JavaScript\r\n\r\n@Component({\r\n  selector: 'app-index',\r\n  templateUrl: './index.component.html',\r\n  styleUrls: ['./index.component.css']\r\n})\r\nexport class IndexComponent implements AfterViewInit, OnInit {\r\n\r\n  // You can use the non-null assertion operator (!) to tell TypeScript that the property will be initialized for sure, and it will not be null or undefined\r\n  @ViewChild('notificationModal') modalElementRef!: ElementRef;\r\n  @ViewChild('errorModal') modalError!: ElementRef;\r\n  @ViewChild('photoInput') photoInput!: ElementRef;\r\n  blobs: Blob[] = [];\r\n  imagePreviews: string[] = [];\r\n  values: number[] = [];\r\n  photoFormat: String = \"\";\r\n  error: String = \"\";\r\n  showError: boolean = false;\r\n  paperBacking:String = \"mat\";\r\n\r\n  // renderer is used for display modal\r\n  constructor(private renderer: Renderer2, private uploadService: UploadService, private router: Router) {}\r\n  ngOnInit(): void {\r\n    localStorage.removeItem(\"photos uploaded\");\r\n  }\r\n\r\n  // display modal on page load\r\n  ngAfterViewInit(): void {\r\n    const modalNative: HTMLElement = this.modalElementRef.nativeElement;\r\n    const modal = new bootstrap.Modal(modalNative, {\r\n      backdrop: 'static', // Prevents closing when clicking outside\r\n      keyboard: false // Prevents closing with the escape key\r\n    });\r\n    modal.show();\r\n  }\r\n\r\n  decrementValue(index: number) {\r\n    this.values[index] = this.values[index] > 1 ? this.values[index] - 1 : 1;\r\n  }\r\n\r\n  incrementValue(index: number) {\r\n    this.values[index] = this.values[index] + 1;\r\n  }\r\n\r\n  changeValue(i: number, newValue: number) {\r\n    this.values[i] = newValue;\r\n  }\r\n\r\n  removeImage(index: number) {\r\n    this.imagePreviews.splice(index, 1);\r\n    this.blobs.splice(index, 1);\r\n    this.values.splice(index, 1);\r\n  }\r\n\r\n  setImageStyles() {\r\n    const styles = {\r\n      'height': '200px',      // Set the desired height\r\n      'width': '100%',        // Set width to 100% of the card width\r\n      'object-fit': 'contain', // Ensures the entire image fits within the dimensions\r\n      'overflow': 'hidden'    // Hides parts of the image that overflow the dimensions (just in case)\r\n    };\r\n    return Object.entries(styles).map(([k, v]) => `${k}: ${v}`).join('; ');\r\n  }\r\n\r\n  // adding photos\r\n  onFilesSelected(event: Event) {\r\n    localStorage.setItem(\"photos uploaded\", \"true\")\r\n\r\n    const input = event.target as HTMLInputElement;\r\n    if(input.files == null)return;\r\n    if (!input.files.length) return;\r\n\r\n    const files = input.files;\r\n    // const blobs: Blob[] = [];\r\n\r\n    for (let i = 0; i < files.length; i++) {\r\n      const blob = new Blob([files[i]], { type: files[i].type });\r\n      this.blobs.push(blob);\r\n      this.values.push(1);\r\n      // Here you can either upload each blob right away or collect them in an array to upload later\r\n\r\n      // Create a FileReader to read the blob\r\n      const reader = new FileReader();\r\n      reader.onload = (e: any) => {\r\n        this.imagePreviews.push(e.target.result);\r\n      };\r\n      reader.readAsDataURL(blob);\r\n    }\r\n\r\n    // Example: Upload the first blob\r\n    // This is just for demonstration, your upload method may differ\r\n    this.uploadService.uploadImage(this.blobs[0]).subscribe(\r\n      response => {\r\n        console.log('Upload successful', response)\r\n        \r\n      },\r\n      error => console.error('Error:', error)\r\n    );\r\n  }\r\n\r\n  // switches between components\r\n  photosAdded(){\r\n    // error handling\r\n    this.showError = false;\r\n    this.error = \"\";\r\n    let pu = localStorage.getItem(\"photos uploaded\");\r\n    if(pu == null){\r\n      this.error = \"Niste uneli ni jednu fotografiju.\";\r\n      this.showError = true;\r\n    }\r\n    if(this.photoFormat == \"\" && this.showError == false){\r\n      this.error = \"Morate izabrati format izrade fotografija.\";\r\n      this.showError = true;\r\n    }\r\n\r\n    if(this.showError){\r\n      const modalNative: HTMLElement = this.modalError.nativeElement;\r\n      const modal = new bootstrap.Modal(modalNative, {\r\n        backdrop: 'static', // Prevents closing when clicking outside\r\n        keyboard: false // Prevents closing with the escape key\r\n      });\r\n      modal.show();\r\n      return;\r\n    }\r\n    localStorage.setItem(\"photos\", JSON.stringify(this.blobs));\r\n    this.router.navigate([\"extras\"]);\r\n  }\r\n\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}